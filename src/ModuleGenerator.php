<?php


namespace Freezemage\BitrixPlugin;

use DateTime;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;


/**
 * @internal Following class members are non-existent.
 *
 * @method string InstallFiles()
 * @method string UnInstallFiles()
 * @method string InstallDB()
 * @method string UnInstallDB()
 * @method string DoInstall()
 * @method string DoUninstall()
 *
 * @property-read string $MODULE_ID
 * @property-read string $MODULE_NAME
 * @property-read string $MODULE_DESCRIPTION
 * @property-read string $MODULE_VERSION
 * @property-read string $MODULE_VERSION_DATE
 * @property-read string $PARTNER_NAME
 * @property-read string $PARTNER_URI
 */
final class ModuleGenerator
{
    private Filesystem $filesystem;

    public function __construct(Filesystem $filesystem = null)
    {
        $this->filesystem = $filesystem ?? new Filesystem();
    }

    public function build(string $modulePath, ModuleMeta $meta): void
    {
        $files = [
                'install/index.php' => $this->buildInstaller($meta),
                'install/version.php' => $this->buildVersion($meta),
                'include.php' => $this->buildInclude($meta)
        ];

        foreach ($files as $path => $content) {
            $fullPath = Path::join($modulePath, $path);
            $this->filesystem->dumpFile($fullPath, $content);
        }
    }

    public function buildInstaller(ModuleMeta $moduleMeta): string
    {
        $className = str_replace('.', '_', $moduleMeta->id);

        return <<<INSTALLER
        <?php
        /** @generated by freezemage0/bitrix-composer-plugin */
        
        defined('B_PROLOG_INCLUDED') || die;
        
        
        use Bitrix\Main\ModuleManager;
        use Bitrix\Main\Loader;
        use CModule;
        
        
        final class {$className} extends CModule
        {
            public function __construct()
            {
                $this->MODULE_ID = {$this->wrap($moduleMeta->id)};
                $this->MODULE_NAME = {$this->wrap($moduleMeta->name)};
                $this->MODULE_DESCRIPTION = {$this->wrap($moduleMeta->description)};
                $this->PARTNER_NAME = {$this->wrap($moduleMeta->partnerName)};
                $this->PARTNER_URI = {$this->wrap($moduleMeta->partnerUri)};
                
                \$version = include __DIR__ . '/version.php';
                
                $this->MODULE_VERSION = \$version['MODULE_VERSION'];
                $this->MODULE_VERSION_DATE = \$version['MODULE_VERSION_DATE'];
            }
            
            public function DoInstall()
            {
                {$this->InstallDB()};
                {$this->InstallFiles()};
            }
            
            public function DoUninstall()
            {
                {$this->UnInstallFiles()};
                {$this->UnInstallDB()};
            }
            
            public function InstallDB(): void
            {
                global \$APPLICATION;
                
                if (ModuleManager::isModuleInstalled(\$this->MODULE_ID)) {
                    \$APPLICATION->ThrowException('Module \$this->MODULE_ID is already installed.');
                    return;
                }
                
                ModuleManager::registerModule(\$this->MODULE_ID);
                Loader::includeModule(\$this->MODULE_ID);
                
                // TODO: Implement method body.
            }
            
            public function UnInstallDB(): void
            {
                global \$APPLICATION;
                
                if (!ModuleManager::isModuleInstalled(\$this->MODULE_ID)) {
                    return;
                }
                
                // TODO: Implement method body.
                
                ModuleManager::unRegisterModule(\$this->MODULE_ID);
            }
            
            public function InstallFiles(): void
            {
                // TODO: Implement method body.
            }
            
            public function UnInstallFiles(): void
            {
                // TODO: Implement method body.
            }
        }
        
        INSTALLER;

    }

    public function buildVersion(): string
    {
        $currentTime = new DateTime();

        return <<<VERSION
        <?php
        /** @generated by freezemage0/bitrix-composer-plugin */
        
        return [
            'MODULE_VERSION' => '0.0.0',
            'MODULE_VERSION_DATE' => {$this->wrap($currentTime->format('Y-m-d H:i:s'))}
        ];

        VERSION;
    }

    public function buildInclude(ModuleMeta $meta): string
    {
        return <<<INCLUDE
        <?php
        /** @generated by freezemage0/bitrix-composer-plugin */

        defined('B_PROLOG_INCLUDED') || die;
        
        
        require __DIR__ . '/vendor/autoload.php';
        
        INCLUDE;
    }

    public function __get(string $name): string
    {
        return "\$this->{$name}";
    }

    public function __call(string $name, array $arguments): string
    {
        return "\$this->{$name}()";
    }

    private function wrap(string $content): string {
        return "'{$content}'";
    }
}
